@page "/history"
@using WeatherStation.Shared
@inject HttpClient Http

<h1>History</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (temps == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @foreach (var deviceTemps in temps)
    {
        <h2>@deviceTemps.Key</h2>
        <table class="table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var temp in deviceTemps.Value)
            {
                <tr>
                    <td>@temp.Time</td>
                    <td>@temp.Value</td>
                </tr>
            }
            </tbody>
        </table>
        <LineChart @ref="lineChart" TItem="double" />
        <Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>
    }
}

@code {

    private IDictionary<string, List<Temperature>> temps;

    protected override async Task OnInitializedAsync()
    {
        temps = await Http.GetJsonAsync<IDictionary<string, List<Temperature>>>("Query");
    }

    LineChart<double> lineChart = new LineChart<double>();

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        Console.WriteLine(lineChart is null);

        lineChart.Clear();

        lineChart.AddLabel( Labels );

        lineChart.AddDataSet( GetLineChartDataset() );

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = temps?.FirstOrDefault().Value?.Select(x=>x.Value).ToList() ?? new List<double>() ,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };


}